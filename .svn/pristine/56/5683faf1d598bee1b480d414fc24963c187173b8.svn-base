layui.use(['jquery', 'layim', 'layer', 'laytpl', 'form'], function() {
	var $ = layui.jquery;
	var layim = layui.layim;
	var layer = layui.layer;
	var laytpl = layui.laytpl;
	var form = layui.form;

	var aesKey = 'abcdefgabcdefg12'; //秘钥。16位

	var scripts = document.getElementsByTagName('script');
	var sum = scripts.length;
	var url = '';
	var regex = /\S*lim.js\?\S*$/;
	for (var i = 0; i < sum; i++) {
		if (regex.exec(scripts[i].src)) {
			url = scripts[i].src;
		}
	}

	var regex = /^(\w+):\/\/([^\/:]*)(?::(\d+))?\/([^?]*)(?:\?(.*))?$/gi;
	regex.exec(url);
	var protocol = RegExp.$1;
	var domain = RegExp.$2;
	var port = RegExp.$3;
	var uri = RegExp.$4;
	var qstring = RegExp.$5;

	var $this = this;
	var host = 'http://192.168.1.123:8080';
	var wshost = 'ws://192.168.1.158:9321';


	var user, config, setting, socket, mine, to, elem, textarea, kefuStatus, msgboxCount = 0,
		recevingCount = 0;

	var index = layer.load(1);
	$.ajax({
		type: 'get',
		url: host + '/httpClient/ajaxKey.action?' + qstring + '&' + window.location.hostname,
		dataType: 'json',
		async:false,
		crossDomain: true,
		xhrFields: {
			withCredentials: true
		},
		success: function(res) {
			if (res.code == 200) {
				user = res.data;
				document.cookie = 'JSESSIONID=' + user.sessionId + ';path=/';

				$.ajax({
					type: 'GET',
					url: host + '/static/lib/layui/lim.config.json?sign=' + user.sign + '&type=' + user.type + '&avatar=' + user.avatar + '&username=' + user.username + '&id=' + user.id + '&host=' + host + '&JS=' + user.sessionId + '&wshost=' + wshost,
					dataType: 'json',
					async:false,
					crossDomain: true,
					xhrFields: {
						withCredentials: true
					},
					success: function(res) {
						config  = res.data;
						layim.config(config);
					},
					error: function(res) {
						layer.msg('IM初始化失败，请刷新页面重试');
						console.log(res);
						return false;
					}
				})
			}
		},
		error: function(res) {
			layer.msg('IM初始化失败，请刷新页面重试');
			console.log(res);
			return false;
		}
	})

	mine = layim.cache().mine;
	socket = new WebSocket(wshost + '?key=' + mine.id);
	


	if ((mine.id).indexOf("_type_tourist_") != -1) {
		$.ajax({
			type: 'get',
			url: host + '/api/lim/setting/settingInit.action?companyId=' + mine.id.split("_")[1],
			async: false,
			dataType: 'json',
			success: function(res) {
				if (res.code == 200) {
					setting = res.data;
				}
			}
		});
		

		var idleTime = {
			timerWarning: null,
			reset: function() {
				clearTimeout(this.timerWarning);
				return this;
			},
			start: function() {
				if (setting.settingSessionidletime != 0) {
					this.timerWarning = setTimeout(function() {
						layer.open({
							title: '2分钟后关闭聊天窗口',
							content: setting.settingOvertimetip ,
							time: 2 * 60 * 1000,
							end: function(){
								layim.closeChat();
							}
						});
					}, 60 * 1000);

				}
			}
		}
	}


	socket.onopen = function() {
		$.get(host + '/chatlog/countChatlog.action?id=' + mine.id, function(data, status) {
			setTimeout(function() {
				if (Number(data) > 0) {
					msgboxCount = data;
					layim.msgbox(msgboxCount);
				}
			}, 1500);
			layer.close(index);
			console.log('通信连接成功');
		});
	};

	socket.onclose = function(res){
		console.log('通信连接已关闭');
  };
	socket.onerror = function(res){
		console.log('通信发生异常');
  };



	layim.on('chatChange', function(res) {
		to = res.data, elem = res.elem, textarea = res.textarea;

		if (to.type == 'friend' && to.status == 'offline') {
			layim.setChatStatus('<span style="color:#969c98;">离线</span>');
		}
		if (to.type == 'friend' && to.status == 'online') {
			layim.setChatStatus('<span style="color:#969c98;">在线</span>');
		}

		if (to.type == 'friend' && msgboxCount != 0) {
			$.getJSON(
				host + '/chatlog/readFriendChatlog.action', {
					fromid: to.id,
					id: mine.id
				},
				function(res) {
					if(res.code == 200) {
						$.each(array, function(index, msg) {
							layim.getMessage(msg);
						});
						msgboxCount = msgboxCount - array.length;
						if (msgboxCount > 0) {
							layim.msgbox(msgboxCount);
						} else {
							$('.layim-tool-msgbox span').text('').css('display', 'none');
						}
					}
				});
		}
	});

	// 监听发送消息
	layim.on('sendMessage', function(res) {
		var type = 'chatMessage';
		res.to.list = null;

		if((mine.id).indexOf('_type_tourist_') >= 0){
			idleTime.reset().start();
		}
		if (res.to.id == 'robot_key') {
			type = 'robotMessage';
		}

		socket.send(JSON.stringify({
			type: type,
			data: res
		}));
	});

	// 监听收到的消息
	socket.onmessage = function(res) {
		var obj = JSON.parse(res.data);
		if (obj != null && obj.hasOwnProperty('type') && obj.hasOwnProperty('data')) {
			var to = obj.data;

			switch (obj.type) {
				case 'statusMessage':
					layim.setFriendStatus(to.id, to.content);
					break;
				case 'chatMessage':
				case 'systemMessage':
					layim.getMessage(to);
					break;
				case 'closeMessage':
					layer.open({
						title: '系统提醒',
						content: to.content,
						end: function(){
							idleTime.reset();
							layim.closeChat();
							socket.close();
						}
					});
					
					break;
				case 'promptMessage':
					layer.open({
						title: '系统提醒',
						content: to.content,
						offset: 'rb',
						shade: 0,
						time: 10000
					});
					break;
				default:
					layim.getMessage(to);		
			}

		} else {
			console.log('接受到的消息为空');
		}
	};

	// 状态切换
	layim.on('online', function(status) {
		socket.send(JSON.stringify({
			type: 'statusMessage', // 随便定义，用于在服务端区分消息类型
			data: {
				id: mine.id,
				system: true,
				type: 'friend',
				content: status
			}
		}));
	});

	//修改个性签名
	layim.on('sign', function(value) {
		$.ajax({
			type: 'POST',
			url: host + '/httpClient/ajaxUpateSign.action',
			data: {
				'id': mine.id,
				'sign': value
			},
			dataType: 'text',
			success: function(res) {
				layer.msg(res);
			},
			error: function() {
				console.log('出错了');
			}
		});
		//此时，你就可以通过Ajax将新的签名同步到数据库中了。
	});


	// 留言板
	layim.on('tool(msgboard)', function(insert, send, obj) { // 事件中的tool为固定字符，而code则为过滤器，对应的是工具别名（alias）
		layer.open({
			type: 2,
			title: '留言板',
			area: ['600px', '450px'],
			shadeClose: true,
			content: host + '/static/lib/layui/msgboard.html?data=' + aesEncrypt(mine.id + '&' + host + '&' + mine.username)
		});
	});


	//面板操作
	var active = {
		// 咨询客服
		chatKefu: function() {
			var tempMine = mine;
			tempMine.content = mine.companyId;
			console.log(mine.sign);
			socket.send(JSON.stringify({
				type: 'chatKefuMessage',
				data: {
					mine: tempMine
				}
			}));
		}
	};

	$('.site-demo-layim').on('click', function() {
		var type = $(this).data('type');
		active[type] ? active[type].call(this) : '';
	});



	$('body').on('mouseover', '.layui-layim-marking i', function() {
		var score = $(this).index() + 1;
		$(this).parent().find('i').each(function(index, obj) {
			if (index < score) {
				$(obj).css({
					'color': '#F00'
				});
			} else {
				$(obj).removeAttr('style');
			}
		});
	}).on('click', '.layui-layim-marking i', function() {
		var tempMine = mine,
			tempTo = new Object();
		tempMine.content = $(this).index() + 1;
		tempTo.id = to.id;
		tempTo.type = to.type;
		socket.send(JSON.stringify({
			type: 'touristGiveKefuScore',
			data: {
				to: tempTo,
				mine: tempMine
			}
		}))
		$('body').off('mouseover', '.layui-layim-marking i').off('click', '.layui-layim-marking i');
	})


	//加密
	function aesEncrypt(content) {
		var key = CryptoJS.enc.Utf8.parse(aesKey);
		var srcs = CryptoJS.enc.Utf8.parse(content);
		var encrypted = CryptoJS.AES.encrypt(srcs, key, {
			mode: CryptoJS.mode.ECB,
			padding: CryptoJS.pad.Pkcs7
		});
		return encrypted.toString();
	}
	//解密
	function aesDecrypt(content) {
		content = content.replace(/\s/g, '+'); //由于地址栏接收到的加密串存在+号回被自动转为空格。需要替换回来。
		var key = CryptoJS.enc.Utf8.parse(aesKey);
		var decrypt = CryptoJS.AES.decrypt(content, key, {
			mode: CryptoJS.mode.ECB,
			padding: CryptoJS.pad.Pkcs7
		});
		return CryptoJS.enc.Utf8.stringify(decrypt).toString();
	}

});