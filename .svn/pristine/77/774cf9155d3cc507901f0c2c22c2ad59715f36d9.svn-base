<template>
<el-row class="content-body" v-loading="loading" element-loading-text="拼命加载中" v-if="item != null && rules != null">
<el-form :model="item" :rules="rules" ref="sysroleForm" label-width="120px">
    <el-form-item label="角色名称" prop="sysroleName">
      <s-textfield v-model="item.sysroleName"></s-textfield>
    </el-form-item>
    <el-form-item label="角色权限" prop="sysroleColumnIds">
      <el-tree ref="sysroleColumn" :data="columnJson"  node-key="id" :props="{label: 'name', children: 'children'}" show-checkbox :default-checked-keys="item.sysroleColumnIds" @check-change="handleCheckChange" :render-content="renderContent"></el-tree>
    </el-form-item>
    <el-form-item label="角色描述" prop="sysroleDescription">
      <s-textarea v-model="item.sysroleDescription"></s-textarea>
    </el-form-item>
  <el-form-item>
    <el-button type="primary" @click="formSubmit('sysroleForm')">确认</el-button>
    <el-button @click="formReset('sysroleForm')">重置</el-button>
  </el-form-item>
</el-form>
</el-row>
</template>
<script>
export default {
  data() {
    return {
      loading: true,
      path: './permissions/sysrole/sysrole',
      route: 'sysroleManage',
      rules: null,
      item: null,
      columnJson: null
    }
  },
  mounted() {
    this.getData('columnJson', './navigation/sysprivilege/sysprivilege-nodes.json');
    this.initForm();
  },
  watch: {
    $route (to, form){
      this.initItem();
    }
  },
   methods: {
    handleCheckChange(data, checked, indeterminate){
      if(data.hasOwnProperty('sysprivileges')) {
        if(checked) {
          this.item.sysroleColumnIds.push(data.id);
        } else {
          let index = $.inArray(data.id, this.item.sysroleColumnIds);
          if(index != -1){
            this.item.sysroleColumnIds.splice(index, 1);
          }
          data.sysprivileges.forEach((node) => {
            let index = $.inArray(node.id, this.item.sysrolePrivilegeIds);
            if(index != -1){
              this.item.sysrolePrivilegeIds.splice(index, 1);
            }
          })
        }
      }
    },
    handleRenderCheckChange(e, data, node){
      let checked = e.target.checked, val = parseInt(e.target.value);
      if(checked){
        this.item.sysrolePrivilegeIds.push(val);
        if($.inArray(data.id, this.item.sysroleColumnIds) === -1){
          this.item.sysroleColumnIds.push(data.id);
          this.$refs.sysroleColumn.setChecked(data.id, true);
        }
      } else {
        let index = $.inArray(val, this.item.sysrolePrivilegeIds);
        if(index != -1){
          this.item.sysrolePrivilegeIds.splice(index, 1);
        }
      }
    },
    renderContent(h, { node, data, store }) {
      return (
        <span>
          {node.label}
          {
            data.children?'': (<s-buttonbox-group on-change={ () => this.handleRenderCheckChange(event, data, node) } class="pull-right" size="small" value={this.item.sysrolePrivilegeIds} options={data.sysprivileges} props={{label:'name', value:'id'}}></s-buttonbox-group>)
          }
        </span>
      )
    }
  }
}
</script>