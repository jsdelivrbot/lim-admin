<#assign d=JspTaglibs["/WEB-INF/data-tags.tld"]/>
<#assign id=RequestParameters.id!"" />
<#assign wshost=RequestParameters.wshost!"" />

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta name="viewport"
	content="width=device-width, initial-scale=1, maximum-scale=1">
<title>消息盒子</title>

<link rel="stylesheet" href="/static/lib/layui/css/layui.css" media="all">
<style>
.layim-msgbox {
	margin: 15px;
}

.layim-msgbox li {
	position: relative;
	margin-bottom: 10px;
	padding: 0 130px 10px 60px;
	padding-bottom: 10px;
	line-height: 22px;
	border-bottom: 1px dotted #e2e2e2;
}

.layim-msgbox .layim-msgbox-tips {
	margin: 0;
	padding: 10px 0;
	border: none;
	text-align: center;
	color: #999;
}

.layim-msgbox .layim-msgbox-system {
	padding: 0 10px 10px 10px;
}

.layim-msgbox li p span {
	padding-left: 5px;
	color: #999;
}

.layim-msgbox li p em {
	font-style: normal;
	color: #FF5722;
}

.layim-msgbox-avatar {
	position: absolute;
	left: 0;
	top: 0;
	width: 50px;
	height: 50px;
}

.layim-msgbox-user {
	padding-top: 5px;
}

.layim-msgbox-content {
	margin-top: 3px;
}

.layim-msgbox .layui-btn-small {
	padding: 0 15px;
	margin-left: 5px;
}

.layim-msgbox-btn {
	position: absolute;
	right: 0;
	top: 12px;
	color: #999;
}
</style>
</head>

<body>

	<ul class="layim-msgbox" id="LAY_view"></ul>

	<div style="margin: 0 15px;"></div>

	<textarea title="消息模版" id="LAY_tpl" style="display:none;">
			{{# layui.each(d.data, function(index, item){ if(item.fromid){ }}
			<li data-fromid="{{ item.fromid }}">
				<img src="{{ item.avatar }}"
			class="layui-circle layim-msgbox-avatar">
				<p class="layim-msgbox-user">
					{{ item.username||'' }}
					<span>{{ item.time }} 共<em>{{ item.count }}</em>条</span> 
				</p>
				<p class="layim-msgbox-content">
					<span>{{ item.content }} </span>
				</p>
				<p class="layim-msgbox-btn">
					<button class="layui-btn layui-btn-small" data-type="read">查看</button>
					<button class="layui-btn layui-btn-small layui-btn-primary"
					data-type="ignore">忽略</button>
				</p>
			</li>
			{{# } else { }}
			<li class="layim-msgbox-system">
				<p>
					<em>系统：</em>{{ item.content }}<span>{{ item.time }}</span>
				</p>
			</li>
			{{# } }); }}
		</textarea>

	<script src="/static/lib/layui/layui.js"></script>
	<script>
		layui
				.use(
						[ 'layim', 'flow' ],
						function() {
							var layim = layui.layim, layer = layui.layer, laytpl = layui.laytpl, $ = layui.jquery, flow = layui.flow;
							var cache = {}; //用于临时记录请求到的数据
							//请求消息
							var renderMsg = function(page, callback) {
								//实际部署时，请将下述 getmsg.json 改为你的接口地址
								$.getJSON('/chatlog/msgBox.action', {
									id : "${id}"
								}, function(res) {
									if (res.code == 200) {
										//记录来源用户信息
										layui.each(res.data, function(index, item) {
											cache[item.fromid] = item;
										});
										callback(res.data, res.pages);
									}else{
										return layer.msg(res.msg);
									}
								});
							};
							//消息信息流
							flow
									.load({
										elem : '#LAY_view' //流加载容器
										,
										isAuto : false,
										end : '<li class="layim-msgbox-tips">暂无更多新消息</li>',
										done : function(page, next) { //加载下一页
											renderMsg(
													page,
													function(data, pages) {
														var html = laytpl(
																LAY_tpl.value)
																.render(
																		{
																			data : data,
																			page : page
																		});
														next(html, page < pages);
													});
										}
									});
							//操作
							var active = {
								//查看消息
								read : function(othis) {
									var li = othis.parents('li'), fromid = li
											.data('fromid'), user = cache[fromid];
									//获取离线的聊天消息
									//查看完后将此离线消息从数据库中除去
									var target = '${wshost}?key=cross_key';
									var socket = new WebSocket(target);
									
									socket.onopen = function() {
											$.getJSON('/chatlog/readChatlog.action', {
												from : user.from
											}, function(res) {
												if(res.code==200 && res.data.length>0){
													$.each(res.data, function(n,
															value) {
														// 监听发送消息.
														socket.send(JSON.stringify({
															type : 'crossMessage' // 跨域消息类型
															,
															data : {
																mine:{
																	id : value.id,
																	avatar : value.avatar,
																	username : value.username,
																	content : value.content,
																	mine : value.mine,
																	timestamp : value.timestamp,
																	type : value.type,
																	fromid : value.fromid,
																	system : value.system
																},
																to:{
																	id : "${id}",
																	type :"friend"
																}
															}
														}));
													});
												}else{
													layer.msg(res.msg);
												}
												
											}, "json");//返回的类型有：json,html,xml,text
											othis.parents('li').remove();
									}
								}
								//忽略消息
								,
								ignore : function(othis) {
									var li = othis.parents('li'), fromid = li
											.data('fromid'), user = cache[fromid];
									layer.confirm('确定忽略吗？',{icon: 3, title:'提示'},function(index){
											othis.parents('li').remove();
											layer.close(index);
											$.post('/chatlog/ignoreChatlog.action', {
												//忽略完后将此离线消息从数据库中除去
												from : user.from
											});
									});
								}
							};
							$('body').on('click','.layui-btn',function() {
								var othis = $(this), type = othis.data('type');
									active[type] ? active[type].call(this,othis) : '';
							});
						});
	</script>
</body>
</html>