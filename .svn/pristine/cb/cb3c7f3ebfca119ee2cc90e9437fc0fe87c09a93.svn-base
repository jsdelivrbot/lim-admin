export default {

  install: function(Vue, options) {

    Vue.prototype.getSource = function(url, params, callback) {
      if (typeof(params) === 'undefined') {
        params = null;
      }

      this.$http.get(url, {
        params: params
      }).then(function(res) {
        let result = {};
        switch (res.body.code) {
          case 200:
            result = res.body;
            break;
          case -1:
            layer.msg(res.body.msg);
            break;
          case 10005:
            layer.msg(res.body.msg);
            window.sessionStorage.clear();
            this.$router.push({
              name: 'index'
            });
            break;
          default:
        }

        this.callback = callback;
        this.callback(result);
      });
    };

    Vue.prototype.getData = function(key, path, params) {
      let url = this.config.userpath + path.substr(1);
      if (typeof(params) === 'undefined') {
        params = null;
      }

      this.getSource(url, params, function(res) {
        if (res.code === 200) {
          this[key] = res.data;
        }
      });
    };

    Vue.prototype.initItem = function() {

      let url = this.config.userpath + this.path.substr(1) + 'Init.action';
      this.getSource(url, this.$route.query, function(res) {
        if (res.code === 200) {
          this.loading = false;
          this.item = res.data;
        }
      });
    }

    Vue.prototype.initRules = function() {

      let url = '../static/validation' + this.path.substr(1) + '-validation.json'; //这里是本地化校验文件配置，你可以测试一下。
      // let url = this.config.userpath + this.path.substr(1) + '-validation.json';
      this.getSource(url, this.$route.query, function(res) {
        if (res.code === 200) {
          this.loading = false;
          this.rules = res.data;
        }
      });
    }

    Vue.prototype.initForm = function() {
      let url1 = '../static/validation' + location.pathname.substr(0, location.pathname.indexOf('/', 1)) + this.path.substr(1) + '-validation.json'; //这里是本地化校验文件配置，你可以测试一下。
      // let url1 = this.config.userpath + this.path.substr(1) + '-validation.json';
      let url2 = this.config.userpath + this.path.substr(1) + 'Init.action';

      this.getSource(url1, this.$route.query, function(res) {
        if (res.code === 200) {
          this.loading = false;
          this.rules = res.data;
        }
      });

      this.getSource(url2, this.$route.query, function(res) {
        if (res.code === 200) {
          this.loading = false;
          this.item = res.data;
        }
      });
    }

    Vue.prototype.listItems = function(url, option) {
      console.log(url, options);
      url = url || this.config.userpath + this.path.substr(1) + '-items.json';
      let params = Object.assign(this.$route.query, option);
      console.log(url, options);
      this.getSource(url, params, function(res) {
        if (res.code === 200) {
          this.loading = false;
          this.count = res.count;
          this.items = res.data;
        }
      });
    }

    Vue.prototype.viewItem = function(url, option) {

      url = url || this.config.userpath + this.path.substr(1) + 'Init.action';      
      let params = Object.assign(this.$route.query, option);

      this.getSource(url, params, function(res) {
        if (res.code === 200) {
          this.loading = false;
          this.item = res.data;
        }
      });
    }

    Vue.prototype.listTrees = function(url, option, index) {

      url = url || this.config.userpath + this.path.substr(1) + '-items.json';
      let params = Object.assign(this.$route.query, option);

      if (this.items[index].isopen == 0) {
        this.getSource(url, params, function(res) {
          if (res.code === 200) {
            let temp1 = this.items.slice(0, index + 1);
            let temp2 = this.items.slice(index + 1);
            this.items = temp1.concat(res.data).concat(temp2);
            this.items[index].isopen = 1;
          }
        });
      } else {
        let length = 0;
        for (let i = index + 1; i < this.items.length; i++) {
          if (this.items[i].level <= this.items[index].level) {
            break;
          } else {
            length++;
          }
        }
        this.items.splice(index + 1, length);
        this.items[index].isopen = 0;
      }
    }

    Vue.prototype.mouldDownLoad = function() {
      let obj = this;
      let url = obj.config.host + window.location.pathname.substr(0, 7) + obj.path.substr(1) + 'Tmpl.action';
      $('iframe').attr('src', url);
    }

    Vue.prototype.reomveItem = function(option) {

      let url = this.config.userpath + this.path.substr(1) + 'Delete.action'
      this.getSource(url, option, function(res) {
        if (res.code === 200) {
          this.listItems();
        }
        layer.msg(res.msg);
      })
    }

    Vue.prototype.getPrivilege = function(option) {
      let url = this.config.userpath + '/privilege-items.json';
      let cid = null;
      let tabActive = this.tabActive;
      this.tabItems.forEach((tab, index) => {
        if (tab.name == tabActive) {
          cid = tab.id;
        }
      });
      let params = Object.assign({
        id: cid
      }, option);
      this.getSource(url, params, function(res) {
        if (res.code === 200) {
          this.privileges = res.data;
        }
      });
    }
  }
};