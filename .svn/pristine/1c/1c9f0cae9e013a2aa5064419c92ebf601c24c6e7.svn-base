layui.use(['jquery', 'layim', 'layer', 'laytpl', 'form'], function() {
	var $ = layui.jquery;
	var layim = layui.layim;
	var layer = layui.layer;
	var laytpl = layui.laytpl;
	var form = layui.form;

	var aesKey = "abcdefgabcdefg12"; //秘钥。16位

	var scripts = document.getElementsByTagName('script');
	var sum = scripts.length;
	var url = "";
	var regex = /\S*lim.js\?\S*$/;
	for (var i = 0; i < sum; i++) {
		if (regex.exec(scripts[i].src)) {
			url = scripts[i].src;
		}
	}

	var regex = /^(\w+):\/\/([^\/:]*)(?::(\d+))?\/([^?]*)(?:\?(.*))?$/gi;
	regex.exec(url);
	var protocol = RegExp.$1;
	var domain = RegExp.$2;
	var port = RegExp.$3;
	var uri = RegExp.$4;
	var qstring = RegExp.$5;

	var $this = this;
	var host = 'http://192.168.1.123:8080';
	var wshost = 'ws://192.168.1.158:9321';


	var user, mine, socket, kefuStatus, msgboxCount = 0,
		recevingCount = 0;

	var index = layer.load(1);
	$.ajax({
		type: 'get',
		url: host + '/httpClient/ajaxKey.action?' + qstring + '&' + window.location.hostname,
		dataType: 'json',
		async: false,
		xhrFields: {
			withCredentials: true
		},
		crossDomain: true,
		success: function(res) {
			if (res.code == 200) {
				user = res.data;
				document.cookie = "JSESSIONID=" + user.sessionId + ";path=/";

				$.ajax({
					type: 'GET',
					url: host + "/static/lib/layui/lim.config.json?type=" + user.type + "&avatar=" + user.avatar + "&username=" + user.username + "&id=" + user.id + "&host=" + host + "&JS=" + user.sessionId + "&wshost=" + wshost,
					dataType: 'json',
					async: false,
					xhrFields: {
						withCredentials: true
					},
					crossDomain: true,
					success: function(res) {
						layim.config(res.data);
					},
					error: function(res) {
						layer.msg('IM初始化失败，请刷新页面重试');
						console.log(res);
						return;
					}
				})
			}
		},
		error: function(res) {
			layer.msg('IM初始化失败，请刷新页面重试');
			console.log(res);
			return;
		}
	})

	var timer = setInterval(function() {
		if (layim.cache().mine && layim.cache().mine.hasOwnProperty('id')) {
			clearInterval(timer);
			layer.close(index);
		}
	}, 30);
	mine = layim.cache().mine;
	socket = new WebSocket(wshost + '?key=' + mine.id);
	

	socket.onopen = function() {
		$.get(host + '/chatlog/countChatlog.action?id=' + mine.id, function(data, status) {
			setTimeout(function() {
				if (Number(data) > 0) {
					msgboxCount = data;
					layim.msgbox(msgboxCount);
				}
			}, 1500);
		});
	};
	layim.on('chatChange', function(res) {

		var to = res.data;

		if (to.type == 'friend' && to.status == 'offline') {
			layim.setChatStatus('<span style="color:#969c98;">离线</span>');
		}
		if (to.type == 'friend' && to.status == 'online') {
			layim.setChatStatus('<span style="color:#969c98;">在线</span>');
		}

		if (to.type == 'friend' && msgboxCount != 0) {
			$.getJSON(
				host + '/chatlog/readFriendChatlog.action', {
					fromid: to.id,
					id: mine.id
				},
				function(array) {
					if (array != null && array != '') {
						$.each(array, function(index, obj) {
							layim.getMessage({
								username: obj.username,
								avatar: obj.avatar,
								id: obj.id,
								type: obj.type,
								content: obj.content,
								timestamp: obj.timestamp,
								fromid: obj.fromid,
								mine: obj.mine,
								system: false
							});
						});

						msgboxCount = msgboxCount - json.length;
						if (msgboxCount > 0) {
							layim.msgbox(msgboxCount);
						} else {
							$('.layim-tool-msgbox span').css('display', 'none');
						}
					}
				});
		}
	});

	// 监听发送消息
	layim.on('sendMessage', function(res) {
		var type = 'chatMessage';
		res.to.list = null;
		if (res.to.id == "robot_key") {
			type = 'robotMessage';
		}

		socket.send(JSON.stringify({
			type: type,
			data: res
		}));
	});

	// 监听收到的消息
	socket.onmessage = function(res) {
		console.log(5555555, res);
		var obj = JSON.parse(res.data);
		if (obj != null && obj.hasOwnProperty('type') && obj.hasOwnProperty('data')) {
			var to = obj.data;
			switch (obj.type) {
				case 'online':
				case 'offline':
					layim.setFriendStatus(to.id, type);
					break;
				case 'chatMessage':
				case 'crossMessage':
				case 'chatKefuMessage':
					layim.getMessage(to);
					break;
				case 'rebroadMessage':
					to.groupid = 0;
					layim.addList(to);
					layim.getMessage(to);
					break;
				case 'kefuStatusMessage':
					if (to.content.length > 0) {
						kefuStatus = to.content;
					}
					if (to.receving > 0) {
						recevingCount = to.receving;
					}
					break;
				case 'closeSocket':
					layer.open({
						title: '系统提醒',
						content: to.systemTip,
						offset: 'rb',
						shade: 0,
						time: 10000
					});
					socket.close();
					break;
				case 'systemTip':
					layer.open({
						title: '系统提醒',
						content: to.systemTip,
						offset: 'rb',
						shade: 0,
						time: 10000
					});
					break;
			}

		} else {
			console.log('接受到的消息为空');
		}
	};

	// 状态切换
	layim.on('online', function(status) {
		if (status == 'online') { // 除非选在在线状态，其他状态全部是离线
			socket.send(JSON.stringify({
				type: 'memberStatusMessage', // 随便定义，用于在服务端区分消息类型
				data: {
					id: mine.id,
					type: 'friend',
					content: 'online'
				}
			}));
		} else { // 如果是隐身或者离线，同一提示为离线
			socket.send(JSON.stringify({
				type: 'memberStatusMessage', // 随便定义，用于在服务端区分消息类型
				data: {
					id: mine.id,
					system: true,
					type: 'friend',
					content: 'offline'
				}
			}));
		}
	});

	//修改个性签名
	layim.on('sign', function(value) {
		$.ajax({
			type: 'POST',
			url: host + "/httpClient/ajaxUpateSign.action",
			data: {
				"id": mine.id,
				"sign": value
			},
			dataType: "text",
			success: function(res) {
				layer.msg(res);
			},
			error: function() {
				console.log("出错了");
			}
		});
		//此时，你就可以通过Ajax将新的签名同步到数据库中了。
	});

	// 专为程序猿设计,发送代码
	layim.on('tool(code)', function(insert, send, obj) { // 事件中的tool为固定字符，而code则为过滤器，对应的是工具别名（alias）
		layer.prompt({
			title: '插入代码',
			formType: 2,
			shade: 0
		}, function(text, index) {
			layer.close(index);
			insert('[pre class=layui-code]' + text + '[/pre]'); // 将内容插入到编辑器，主要由insert完成
			// send(); //自动发送
		});
	});

	//我的定位
	layim.on('tool(position)', function(insert, send, obj) {
		var to = obj.data;
		$.ajax({
			type: 'POST',
			url: host + "/httpClient/getMap.action",
			data: {
				"toId": to.id,
				"mineId": mine.id
			},
			dataType: "text",
			success: function(res) {
				layer.msg(res);
			},
			error: function() {
				console.log("出错了");
			}
		});
	});


	//评分
	layim.on('tool(marking)', function(insert, send, obj) {
		var to = obj.data;
		if (to.id != "type_system_system_0" && to.id != "robot_key") {
			layer.open({
				type: 2,
				title: false,
				content: host + "/static/lib/layui/score.html?data=" + aesEncrypt(mine.id + "&" + mine.username + "&" + mine.avatar + "&" + to.type + "&" + temp.id + "&" + wshost + "&" + temp.username + "&" + temp.avatar),
				shade: [0, '#19e64dff'],
				shadeClose: true,
				closeBtn: 0,
				area: ['230px', '120px']
			});
		} else {
			layer.msg("无法操作");
			return;
		}
	});

	// 留言板
	layim.on('tool(msgboard)', function(insert, send, obj) { // 事件中的tool为固定字符，而code则为过滤器，对应的是工具别名（alias）
		layer.open({
			type: 2,
			title: '留言板',
			area: ['600px', '450px'],
			shadeClose: true,
			content: host + '/static/lib/layui/msgboard.html?data=' + aesEncrypt(mine.id + '&' + host + '&' + mine.username)
		});
	});

	//面板操作
	var active = {
		// 咨询客服
		chatKefu: function() {
			socket.send(JSON.stringify({
				type: 'chatKefuMessage',
				data: {
					mine: {
						id: mine.id,
						username: mine.username,
						avatar: mine.avatar,
						content: mine.companyId,
					}
				}
			}));
		}
	};

	$('.site-demo-layim').on('click', function() {
		var type = $(this).data('type');
		active[type] ? active[type].call(this) : '';
	});


	//加密
	function aesEncrypt(content) {
		var key = CryptoJS.enc.Utf8.parse(aesKey);
		var srcs = CryptoJS.enc.Utf8.parse(content);
		var encrypted = CryptoJS.AES.encrypt(srcs, key, {
			mode: CryptoJS.mode.ECB,
			padding: CryptoJS.pad.Pkcs7
		});
		return encrypted.toString();
	}
	//解密
	function aesDecrypt(content) {
		content = content.replace(/\s/g, '+'); //由于地址栏接收到的加密串存在+号回被自动转为空格。需要替换回来。
		var key = CryptoJS.enc.Utf8.parse(aesKey);
		var decrypt = CryptoJS.AES.decrypt(content, key, {
			mode: CryptoJS.mode.ECB,
			padding: CryptoJS.pad.Pkcs7
		});
		return CryptoJS.enc.Utf8.stringify(decrypt).toString();
	}

});