export default {

  install: function (Vue, options) {

		Vue.prototype.kefuLogin = function(sessionid) {

			this.$http.post(this.config.userpath.substr(0, this.config.userpath.lastIndexOf('/')) + this.path.substr(1) + 'Login.action', 
				JSON.stringify({sessionid: sessionid}),
				{headers: {'Content-Type': 'application/json; charset=utf-8'}}).then(function(res) {
				console.log(res.body);
				if(res.body.code == 200){
			    this.setPersonal({usertype: res.body.data.type, personal: res.body.data});
			    this.$router.push({name: this.route});
			    layer.msg(res.body.msg);
      	} else {
			    layer.msg(res.body.msg);
      	}
	    });
		}

		// Vue.prototype.kefuLogin = function(companyid, usertype, userid) {

		// 	this.$http.post(this.config.userpath.substr(0, this.config.userpath.lastIndexOf('/')) + '/httpClient/toBeKefu.action',	{}, 		 
		// 		{headers:{'Content-Type': 'application/json; charset=utf-8'}, params: {id: 'companyId_' + companyid + '_type_'+ usertype + '_userId_'+ userid}}).then(function(res) {
					
		// 		if(res.body.code == 200){
		// 		    this.setPersonal({usertype: usertype, personal: res.body.data});
		// 		    this.$router.push({name: this.route});
  //     	}
	 //    });
		// }

		Vue.prototype.userLogin = function(formName) {

			this.$refs[formName].validate((valid) => {

        if (valid) {
					this.$http.post(this.config.userpath.substr(0, this.config.userpath.lastIndexOf('/')) + this.path.substr(1) + 'Login.action',
						JSON.stringify(this.item),
						{headers: {'Content-Type': 'application/json; charset=utf-8'}}).then(function(res) {
						if(res.body.code == 200){

			        this.setPersonal({usertype: formName, personal: res.body.data});
							this.$router.push({name: this.route});
		        	// layer.msg(res.body.msg);

	        	} else {
							//提交失败，增加错误信息
							layer.msg('校验不通过，请检查提交的信息是否有误');
		        }
			    }, function(res) {
							//服务器响应提交失败，增加错误信息
			        layer.msg(res.body.msg);
			    });
        } else {
        	layer.msg('校验不通过，请检查提交的信息是否有误');
          return false;
        }
      });
		}

		Vue.prototype.formSubmit = function(formName) {
			this.$refs[formName].validate((valid) => {

        if (valid) {
					this.$http.post(this.config.userpath + this.path.substr(1) + 'Modify.action',
						JSON.stringify(this.item),
						{headers: {'Content-Type': 'application/json; charset=utf-8'}}).then(function(res) {
						if(res.body.code == 200){
							if(this.hasOwnProperty('route') && this['route'] != '') {
								this.$router.push({name: this.route}); //要改，要用tabActive方法
							} else {
								this.initItem();
								//提交成功但不跳转，移除提示信息
			        }
		        	layer.msg(res.body.msg);
	        	} else {
	        		//if(res.body.code == 10001)
							//提交失败，增加错误信息
							layer.msg(res.body.msg);
		        }
			    }, function(res) {
							//服务器响应提交失败，增加错误信息
			        layer.msg(res.body.msg);
			    });
        } else {
        	layer.msg('校验不通过，请检查提交的信息是否有误');
          return false;
        }
      });
		}

		Vue.prototype.formReset = function(formName) {
			this.$refs[formName].resetFields();
		}

		Vue.prototype.formExport = function(formName) {
			let obj = this;
            if(obj.property.length>0){
               let str = 'columns='+obj.property.join('&columns=');
               layer.confirm('需要导出:'+obj.property.join(',')+'？', {
                    btn: ['确定','取消']
                }, function(index, layero){
                    $('iframe').attr('src', obj.config.host + window.location.pathname.substr(0, 7)+obj.exportPath+'?'+str);
                    layer.close(index);
                });
            }else{
                layer.confirm('您还未选择需要导出的列,是否需要全部导出？', {
                    btn: ['确定','取消']
                }, function(index, layero){
                    $('iframe').attr('src',obj.config.host + window.location.pathname.substr(0, 7)+obj.exportPath);
                    layer.close(index);
                });
            }
		}

	}

}